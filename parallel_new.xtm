
;;; parallel_coordinates.xtm:merged code and example --

;; Author: Noah Ingham
;; Keywords: extempore
;; Required dylibs: libglfw3, libnanovg

;;; Commentary:

;;

;;; Code:
;;(sys:load "libs/external/system.xtm")


;; setup GLFW3 and nanovg
(sys:load "libs/external/glfw3.xtm")
(bind-val width  i32 1600)
(bind-val height i32 800)
(bind-val window GLFWwindow*
  (glfw_init_and_create_interaction_window (convert width) (convert height)))
(sys:load "libs/external/nanovg.xtm")
(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))
(sys:load "datavis-lib.xtm")
(call-as-xtlang
 (nvgCreateFont vg "default" "/Library/Fonts/Arial.ttf")
 (nvgFontFace vg "default"))

(bind-func set_bg
   (lambda (vg:NVGcontext*)
     (_nvgFillColor vg (NVGcolor 0.0 0.0 0.0 0.0))
     (nvgBeginPath vg)
     (nvgRect vg 0. 0. (convert width) (convert height))
     (nvgFill vg)))

(dv_draw_axis_labels_2D.font_size 18)

;;(sys:load "libs/core/math_ext.xtm")

(sys:load "csv.xtm")
(sys:load "clustering-kmeans.xtm")

;;(set! current_line:float* (zalloc (+ (* (- n 1) 2) (* 2 n))))

(bind-func log
  (lambda (l:i8*)
    (println l)
    #t
    ))

(bind-val current_line float*)


(bind-val data Data* (load_csv "cars.csv"))


(bind-func draw_parallel_coordinate
  (lambda (bounds:Rect*)
    ;(println "1.1-in")
    (let (;(l2 (log "1.15-in"))
          (vectors (tuple-ref data 0))
          (n (tuple-ref data 1))
          (axes (tuple-ref data 2))
          (d (tuple-ref data 3))
          ;(l (log "1.2-in"))
          ;(l3 (log "1.2-out"))
          (i:i64 0)
          (j:i64 0)
          (k:i64 0)
          (colour1 (NVGcolor .6 .1 .7 0.4))
          (colour2 (NVGcolor .1 .7 .6 0.4))
          (colour3 (NVGcolor .7 .6 .1 0.4))
          (colours (list colour1 colour2 colour3))
          (both:BothCC* (cluster-kmeans data 3))
          (clusters:Clusters (tuple-ref both 0))
          ;(centroids:Centroids (tuple-ref both 1))
         )
      ;(println "2-in")
      ;(printf "n: %i, d: %i\n" n d)
      (dotimes (i n)
        ;(set! centroid (nth centroids (nth clusters i)))
        (dotimes (j d)
          (let ((axis (pref axes j))
                (offset:float (tuple-ref axis 1))
                (range (tuple-ref axis 3))
                (min (tuple-ref range 0))
                (max (tuple-ref range 1))
                ;;(difference (- max min))
                (current (pref vectors (+ j (* i d))))
                (normalized (+ 0.05 (* 0.9 (/ (- current min) (- max min))))))
              ;;(printf "%f\n" current)
              (pset! current_line (* j 2) (convert (offset)) )
              (pset! current_line (+ (* j 2) 1) (convert normalized) )
              ))
        (dv_draw_line vg bounds current_line d (nth colours (pref clusters i)))
        #t
        )
      ;;(free current_line)
      ;(println "2-mid")
      (dotimes (i d)
        ;;(dv_draw_axis_labels_2D vg bounds labs nlabs labs nlabs)
        ;;(dv_draw_axis_2D vg bounds (tuple-ref (nth axes i) 1))
        (dv_draw_axis_2D vg bounds (tuple-ref (pref axes i) 1)))
      ;(println "2-out")
      #t
    )))

(bind-func nvg_draw_tick
  (let ((bar_rect (Rect 0. 20. (convert width) (- (convert height) 30.))))
    (lambda ()
      (nvg_clear)
      (nvgBeginFrame vg width height pixel_ratio)
      (set_bg vg)
      (nvgResetTransform vg)
      (draw_parallel_coordinate bar_rect )
      ;;(draw_barplot bar_rect)
      (nvgEndFrame vg)
      (glfwPollEvents)
      (glfwSwapBuffers window))))


(bind-func transform_data
  (lambda (data:Data*)
    data
    ))












(bind-func draw_barplot
  (let ((nlabs 5)
        (labs:float* (zalloc nlabs))
        (bars:float* (zalloc nlabs))
        (line:float* (zalloc (* 2 nlabs)))
        (i 0))
    (dotimes (i nlabs)
      (pset! labs i (* (convert i) (/ 1. (convert (- nlabs 1)))))
      ;; x positions should be in the middle of the bars
      (pset! line (* i 2) (+ (/ .5 (convert nlabs)) (* (convert i) (/ 1. (convert nlabs))))))
    (lambda (bounds:Rect*)
      (dotimes (i nlabs)
        (pset! bars i (+ .5 (* .3 (cos (* 0.00001 (convert (* (now) (+ i 1))))))))
        (pset! line (+ (* i 2) 1) (+ .5 (* .28 (cos (* 0.00001 (convert (* (now) (+ i 1)))))))))
      (dv_draw_bars vg bounds bars nlabs)
      (dv_draw_axis_labels_2D vg bounds labs nlabs labs nlabs)
      (dv_draw_axes_2D vg bounds)
      (dv_draw_title vg bounds "Barplot")
      (dv_draw_line vg bounds line nlabs null)
      void)))

(bind-func draw_scatterplot
  (let ((npoints 50)
        (points:float* (zalloc (* 2 npoints)))
        (i 0))
    (lambda (bounds:Rect*)
      (dotimes (i npoints)
        (pset! points (* i 2) (+ (* (cos (* .00000064 (convert (* i 2 (now))))) .5) .5))
        ;; (pset! points (+ 1 (* i 2)) (/ (convert i) (convert npoints)))
        (pset! points (+ 1 (* i 2)) (+ .5 (% (* 3.2 (cos (* 0.0000003 (convert (* (now) i) float)))) .5))))
      (dv_draw_scatter_points vg bounds points npoints (+ (* (cos (* .0000053 (convert (now)))) 3.) 5.))
      ;; (dv_draw_axis_labels_2D vg bounds points npoints points npoints)
      (dv_draw_axes_2D vg bounds)
      (dv_draw_title vg bounds "Scatterplot")
      void)))

(bind-func nvg_draw_loop1
  (let ((bar_rect (Rect 0. 0. (* 0.3 (convert width)) (* 0.5 (convert height))))
        (scatter_rect (Rect 0. (* 0.5 (convert height)) (* 0.3 (convert width)) (* 0.5 (convert height))))
        (parallel_rect (Rect (* 0.3 (convert width)) 0. (* 0.7 (convert width)) (convert height)))
        (parity:i64 0))
    (lambda (time:i64 delta_t:double)
      (nvg_clear)
      (set! parity (+ parity 1))
      (nvgBeginFrame vg width height pixel_ratio)
      (nvgResetTransform vg)
      (draw_barplot bar_rect)
      (draw_scatterplot scatter_rect)
      ;(println "1-in")
      (draw_parallel_coordinate parallel_rect)
      ;(println "1-out\n")
      (nvgEndFrame vg)
      (set! data (transform_data data))
      (glfwPollEvents)
      (set_bg vg)
      (glfwSwapBuffers window)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time nvg_draw_loop1 next_time delta_t)))))

(bind-func run_loop
  (lambda ()
    (let (;(data (load_csv "cars.csv"))
          ;(data2 (load_csv "iris.csv"))
          (n:i64 (tref data 1))
          (c_l:float* (halloc (+ (* (- n 1) 2) (* 2 n))))
          )
      (set! current_line c_l)
      (nvg_draw_loop1 (now) (/ 1. 30.))
      ;;(nvg_draw_loop1 (+ 2 (now)) (/ 4. 1.) data2)
      )
    ))

(run_loop)

(bind-func nvg_draw_loop1
  (lambda (time:i64 delta_t:double data:Data*)
    void
    ))




(bind-func nvg_draw_tick2
  (let ((bar_rect (Rect 0. 0. (* 0.3 (convert width)) (* 0.5 (convert height))))
        (scatter_rect (Rect 0. (* 0.5 (convert height)) (* 0.3 (convert width)) (* 0.5 (convert height))))
        (parallel_rect (Rect (* 0.3 (convert width)) 0. (* 0.7 (convert width)) (convert height)))
        (parity:i64 0))
    (lambda ()
      (nvg_clear)
      (set! parity (+ parity 1))
      (nvgBeginFrame vg width height pixel_ratio)
      (nvgResetTransform vg)
      (draw_barplot bar_rect)
      (draw_scatterplot scatter_rect)
      (let ((data (load_csv "cars.csv")))
      (draw_parallel_coordinate parallel_rect data))
      (nvgEndFrame vg)
      ;;(set! data (transform_data data))
      (glfwPollEvents)
      (set_bg vg)
      ;;(printf "\n\n\n\n\n")
      (glfwSwapBuffers window)
      )))
